/*
 * Adapted for Teensy 4.1 + ATK-MC9V034-V1.5 (master mode, single camera, 8-bit data).
 * Polls VSYNC/HREF/PCLK for frame capture.
 * Streams 8-bit grayscale lines over USB Serial.
 * Use PC Python script to view.
 * For faster capture, add DMA/FlexIO (see PJRC forums).
 */

#include <Wire.h>  // Use Wire2 for I2C

#define LNVAL1      23  // HREF (line valid)
#define FRVAL1      26  // VSYNC (frame valid)
#define PIXCLK1     22  // PCLK

#define MAX_IMAGE_WIDTH  752
#define MAX_IMAGE_HEIGHT 480

uint8_t analogGain = 16;  // 16-64 (1x-4x)
uint8_t digitalGain = 4;  // 0-15
uint16_t n_lines = MAX_IMAGE_HEIGHT;
bool send_picture_data = false;

class mt9v034 {
private:
  TwoWire *wire;
  uint8_t addr;
  void write(uint8_t reg, uint16_t val) {
    wire->beginTransmission(addr);
    wire->write(reg);
    wire->write(val >> 8);
    wire->write(val & 0xFF);
    wire->endTransmission();
  }
public:
  mt9v034(TwoWire *w, uint8_t a) : wire(w), addr(a) {}
  void initialize() {
    write(0x0C, 0x0001); // Soft reset
    delay(1);
    write(0x0C, 0x0000);
    // Chip control: Master mode, progressive, simultaneous
    write(0x07, 0x0180); // Bit 0=0 master, bit 7=1 progressive, bit 8=0 simultaneous
    // Recommended settings
    write(0x20, 0x03C7);
    write(0x24, 0x001B);
    write(0x2B, 0x0003);
    write(0x2F, 0x0003);
    // Window: 752x480
    write(0x01, 0x0006); // Column start
    write(0x02, 0x0001); // Row start
    write(0x03, 0x01DF); // Row size (480-1)
    write(0x04, 0x02F8); // Column size (752)
    write(0x05, 0x002B); // Horiz blanking
    write(0x06, 0x0003); // Vert blanking
  }
  void setAGC(bool enable) {
    uint16_t val = enable ? 0x0003 : 0x0000; // Bit 0 AEC, bit 1 AGC
    write(0xAF, val);
  }
  void setCompanding(bool enable) {
    uint16_t val = enable ? (1 << 2) : 0x0000; // Enable 8-bit mode on D[9:2]
    write(0x1C, val);
  }
  void setAnalogGain(uint8_t gain) {
    write(0x35, gain); // Analog gain context A
  }
  void setDigitalGain(uint8_t gain) {
    write(0xA5, gain); // Global digital gain (HDR register, but works)
  }
};

mt9v034 cam1(&Wire2, 0x48);  // I2C addr 0x48 (0x90>>1); change if needed (e.g., 0x5C)

const uint8_t data_pins[8] = {17, 16, 15, 14, 19, 18, 21, 20}; // D0-D7, map to GPIO6 bits 0-7

void setup() {
  // Fast GPIO for data pins
  IOMUXC_GPR_GPR27 = 0xFFFFFFFF;  // GPIO6 fast mode
  GPIO6_GDIR = 0;  // Inputs

  ConfigDataPins();

  pinMode(LNVAL1, INPUT);
  pinMode(FRVAL1, INPUT);
  pinMode(PIXCLK1, INPUT);

  Serial.begin(9600);  // USB high-speed (baud ignored)

  // Setup I2C on Wire2
  Wire2.begin();
  Wire2.setClock(100000);

  // Configure camera
  cam1.initialize();
  cam1.setAGC(true);  // Auto exposure/gain
  cam1.setCompanding(true);  // 8-bit mode

  delay(5000);
  Serial.println("ATK-MC9V034 Started");
}

void loop() {
  uint16_t ln_cnt = 0;

  uint8_t a[MAX_IMAGE_WIDTH];

  // Wait for frame start (VSYNC rising edge)
  while (digitalReadFast(FRVAL1) == LOW);

  for (int ln = 0; ln < MAX_IMAGE_HEIGHT; ln++) {
    // Wait for line start (HREF rising)
    while (digitalReadFast(LNVAL1) == LOW);

    if (ReadCameraLine(a, MAX_IMAGE_WIDTH)) {
      if ((ln_cnt >= MAX_IMAGE_HEIGHT / 2 - n_lines / 2) &&
          (ln_cnt < MAX_IMAGE_HEIGHT / 2 + n_lines / 2) && send_picture_data) {
        SendLine(ln_cnt, a, MAX_IMAGE_WIDTH);
      }
      ln_cnt++;
    }

    // Wait for line end (HREF low)
    while (digitalReadFast(LNVAL1) == HIGH);
  }

  // Serial commands (adapted; exposure via I2C if manual)
  while (Serial.available()) {
    uint8_t buf[3];
    for (int i = 0; i < 3; i++) buf[i] = Serial.read();
    switch (buf[0]) {
      case 'A': analogGain = buf[2]; cam1.setAnalogGain(analogGain); break;
      case 'D': digitalGain = buf[2]; cam1.setDigitalGain(digitalGain); break;
      case 'N': n_lines = (buf[1] << 8) | buf[2]; break;
      case 'P': send_picture_data = buf[2] & 0x01; break;
      default: break;
    }
  }

  if (!Serial.dtr()) send_picture_data = false;
}

void SendLine(uint16_t line, uint8_t *data, uint16_t dataSize) {
  uint8_t *packed = new uint8_t[dataSize + 2];
  memcpy(packed + 2, data, dataSize);  // Direct copy (8-bit)
  packed[0] = line >> 8;
  packed[1] = line;
  Serial.write(packed, dataSize + 2);
  Serial.send_now();
  delete[] packed;
}

bool ReadCameraLine(uint8_t *a, uint16_t px) {
  px--;

  noInterrupts();

  // Capture one line (sample on PCLK rising edge)
  for (uint16_t i = 0; i <= px; i++) {
    while (digitalReadFast(PIXCLK1) == HIGH);  // Wait low
    while (digitalReadFast(PIXCLK1) == LOW);   // Wait rising, sample
    a[i] = GPIO6_PSR & 0xFF;  // Read 8-bit from GPIO6
  }

  interrupts();
  return true;
}

void ConfigDataPins(void) {
  for (uint8_t i = 0; i < 8; i++) {
    pinMode(data_pins[i], INPUT);
  }
}
